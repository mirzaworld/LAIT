name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: lait
          POSTGRES_PASSWORD: lait_password
          POSTGRES_DB: lait_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client redis-tools curl
    
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r ../tests/requirements.txt
        pip install pytest pytest-cov pytest-html
        python -m spacy download en_core_web_sm
    
    - name: Set up test environment
      working-directory: ./backend
      run: |
        export DATABASE_URL="postgresql://lait:lait_password@localhost:5432/lait_test"
        export REDIS_URL="redis://localhost:6379/0"
        export FLASK_ENV=testing
        export JWT_SECRET_KEY=test-secret-key-for-ci
        export AUTO_AUTH_BYPASS=true
    
    - name: Wait for services
      run: |
        echo "Waiting for PostgreSQL..."
        until pg_isready -h localhost -p 5432 -U lait; do
          echo "PostgreSQL is unavailable - sleeping"
          sleep 1
        done
        echo "PostgreSQL is up!"
        
        echo "Waiting for Redis..."
        until redis-cli -h localhost -p 6379 ping; do
          echo "Redis is unavailable - sleeping"
          sleep 1
        done
        echo "Redis is up!"
    
    - name: Initialize database
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://lait:lait_password@localhost:5432/lait_test
        REDIS_URL: redis://localhost:6379/0
        FLASK_ENV: testing
        JWT_SECRET_KEY: test-secret-key-for-ci
      run: |
        python -c "
        import sys
        sys.path.append('.')
        from app_real import app, db
        with app.app_context():
            db.create_all()
            print('Database tables created successfully')
        "
        
    - name: Run backend tests
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://lait:lait_password@localhost:5432/lait_test
        REDIS_URL: redis://localhost:6379/0
        FLASK_ENV: testing
        JWT_SECRET_KEY: test-secret-key-for-ci
        AUTO_AUTH_BYPASS: true
      run: |
        python -m pytest tests/ -v --tb=short --maxfail=5 --cov=. --cov-report=xml --cov-report=html
    
    - name: Run E2E tests
      env:
        DATABASE_URL: postgresql://lait:lait_password@localhost:5432/lait_test
        REDIS_URL: redis://localhost:6379/0
        FLASK_ENV: testing
        JWT_SECRET_KEY: test-secret-key-for-ci
        SECRET_KEY: test-secret-key-for-ci
        AUTO_AUTH_BYPASS: true
      run: |
        cd backend
        # Start the Flask app in background
        python app_real.py &
        FLASK_PID=$!
        
        # Wait for Flask to start
        echo "Waiting for Flask app to start..."
        sleep 5
        
        # Check if app is running
        curl -f http://localhost:5003/api/health || (echo "Flask app failed to start" && exit 1)
        
        # Run E2E tests
        cd ..
        python -m pytest tests/test_e2e_pytest.py -v --tb=short
        
        # Clean up
        kill $FLASK_PID || true
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          backend/htmlcov/
          backend/coverage.xml
    
    - name: Run backend linting
      working-directory: ./backend
      run: |
        pip install flake8 black isort
        flake8 --max-line-length=100 --ignore=E203,W503,F401 .
        black --check --diff .
        isort --check-only --diff .

  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: package-lock.json
    
    - name: Install frontend dependencies
      run: npm ci
    
    - name: Run frontend linting
      run: npm run lint
    
    - name: Run frontend tests
      run: npm test -- --watchAll=false
    
    - name: Build frontend
      run: npm run build

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  docker-build:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [backend-test, frontend-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.backend
        push: false
        tags: lait-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.frontend
        push: false
        tags: lait-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
