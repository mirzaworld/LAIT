name: LAIT Platform CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.11]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y curl
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install pytest requests
        
    - name: Create test environment file
      run: |
        echo "APP_ENV=test" > .env
        echo "JWT_SECRET=test_secret_key" >> .env
        echo "DATABASE_URL=sqlite:///test_lait.db" >> .env
        
    - name: Start backend server
      run: |
        cd backend
        python app_real.py &
        BACKEND_PID=$!
        echo "BACKEND_PID=$BACKEND_PID" >> $GITHUB_ENV
        
    - name: Wait for API health check
      run: |
        echo "Waiting for API to be ready..."
        for i in {1..60}; do
          if curl -f http://localhost:5003/api/health > /dev/null 2>&1; then
            echo "API is ready after $i attempts"
            break
          fi
          if [ $i -eq 60 ]; then
            echo "API failed to start within 60 seconds"
            exit 1
          fi
          echo "Attempt $i/60: API not ready yet..."
          sleep 1
        done
        
    - name: Verify API health
      run: |
        curl -v http://localhost:5003/api/health
        
    - name: Run pytest tests
      run: |
        pytest tests/test_e2e.py -v
        
    - name: Run pytest with quiet mode
      run: |
        pytest tests/test_e2e.py -q
        
    - name: Stop backend server
      if: always()
      run: |
        if [ ! -z "$BACKEND_PID" ]; then
          kill $BACKEND_PID || true
        fi
        # Also kill any remaining processes on port 5003
        pkill -f "python.*app_real.py" || true
        
    - name: Upload test artifacts
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: test-logs
        path: |
          backend/*.log
          test*.db
          .env
