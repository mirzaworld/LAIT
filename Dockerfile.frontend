# LAIT Frontend Production Dockerfile
# ===================================
#
# Multi-stage build for optimized React frontend:
# - Build stage with Node.js 20 Alpine for dependencies and Vite build
# - Production stage with Nginx Alpine for static file serving
# - Environment variable injection for dynamic API endpoint configuration
# - Health checks and security optimizations

FROM node:20-alpine AS builder

# Set working directory
WORKDIR /app

# Install build dependencies for native modules
RUN apk add --no-cache python3 make g++

# Copy package files for dependency installation
COPY frontend/package*.json ./

# Install all dependencies (including devDependencies for build)
RUN npm ci --silent && npm cache clean --force

# Copy source code
COPY frontend/ .

# Build the application with production optimizations
ENV NODE_ENV=production
RUN npm run build

# Verify build output
RUN ls -la dist/ && echo "âœ… Build completed successfully"

# Production stage with optimized nginx
FROM nginx:1.25-alpine

# Install curl for health checks
RUN apk add --no-cache curl && \
    rm -rf /var/cache/apk/*

# Create nginx user and directories
RUN addgroup -g 1001 -S nginx && \
    adduser -S -D -H -u 1001 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx

# Copy custom nginx configuration
COPY <<EOF /etc/nginx/nginx.conf
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging format
    log_format main '\$remote_addr - \$remote_user [\$time_local] "\$request" '
                    '\$status \$body_bytes_sent "\$http_referer" '
                    '"\$http_user_agent" "\$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 10M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        application/javascript
        application/json
        application/rss+xml
        application/xml
        image/svg+xml
        text/css
        text/javascript
        text/plain
        text/xml;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

    server {
        listen 80;
        server_name _;
        root /usr/share/nginx/html;
        index index.html;

        # Security
        server_tokens off;

        # Handle React Router (SPA routing)
        location / {
            try_files \$uri \$uri/ /index.html;
        }

        # Cache static assets
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        # API proxy (optional - for same-origin requests)
        location /api/ {
            # This would proxy to backend if deployed together
            # proxy_pass http://backend:5003;
            return 404;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}
EOF

# Remove default nginx content
RUN rm -rf /usr/share/nginx/html/*

# Copy built application from builder stage
COPY --from=builder /app/dist /usr/share/nginx/html

# Create entrypoint script for environment variable injection
COPY <<EOF /docker-entrypoint.sh
#!/bin/sh
set -e

echo "ðŸš€ Starting LAIT Frontend..."
echo "=============================="

# Inject environment variables into built assets
if [ -n "\$VITE_API_BASE" ]; then
    echo "ðŸ”§ Injecting API base URL: \$VITE_API_BASE"
    find /usr/share/nginx/html -name "*.js" -exec sed -i "s|__VITE_API_BASE__|\$VITE_API_BASE|g" {} \;
fi

echo "âœ… Frontend ready to serve"
echo "   Health check: http://localhost/health"
echo "   App: http://localhost/"
echo ""

# Start nginx
exec nginx -g 'daemon off;'
EOF

# Make entrypoint executable
RUN chmod +x /docker-entrypoint.sh

# Add metadata labels
LABEL maintainer="LAIT Development Team" \
      description="LAIT Frontend Production Container - React SPA with Nginx" \
      version="1.0.0"

# Set proper permissions
RUN chown -R nginx:nginx /usr/share/nginx/html /var/cache/nginx /var/log/nginx

# Expose port 80
EXPOSE 80

# Health check for load balancer
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost/health || exit 1

# Use custom entrypoint
ENTRYPOINT ["/docker-entrypoint.sh"]
