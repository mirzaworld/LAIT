# LAIT Platform - Render.com Deployment Blueprint
# ==============================================
#
# This render.yaml file defines the complete infrastructure for the LAIT 
# Legal Intelligence Platform deployment on Render.com:
# - PostgreSQL database for data persistence
# - Redis instance for caching and session management  
# - Backend API service with Gunicorn WSGI server
# - Frontend static site with React SPA
# - Environment variable configuration for production

services:
  # Backend API Service
  - type: web
    name: lait-api
    env: docker
    region: oregon
    plan: starter
    dockerfilePath: ./backend/Dockerfile.prod
    disk:
      name: lait-api-disk
      size: 1GB
      mount: /app/uploads
    healthCheckPath: /api/health
    autoDeploy: true
    envVars:
      # Core Flask Configuration
      - key: FLASK_ENV
        value: production
      - key: FLASK_DEBUG
        value: "false"
      - key: PYTHONPATH
        value: "/app/backend:/app"
      
      # Security - JWT Secret Key (auto-generated by Render)
      - key: JWT_SECRET_KEY
        generateValue: true
      
      # Database Connection (auto-injected from PostgreSQL service)
      - key: DATABASE_URL
        fromDatabase:
          name: lait-postgres
          property: connectionString
      
      # Redis Cache Connection (auto-injected from Redis service)
      - key: REDIS_URL
        fromService:
          type: redis
          name: lait-redis
          property: connectionString
      
      # CORS and Security
      - key: ALLOWED_ORIGINS
        value: "https://lait-web.onrender.com,http://localhost:3000"
      
      # File Upload Configuration
      - key: UPLOAD_FOLDER
        value: "/app/uploads"
      - key: MAX_CONTENT_LENGTH
        value: "16777216"  # 16MB max upload size
      
      # Rate Limiting (using Redis)
      - key: RATE_LIMIT_STORAGE_URL
        fromService:
          type: redis
          name: lait-redis
          property: connectionString
      
      # Production Performance
      - key: WEB_CONCURRENCY
        value: "2"
      - key: GUNICORN_WORKERS
        value: "2"
      - key: GUNICORN_THREADS
        value: "4"
      
      # ML Service Configuration
      - key: ML_SERVICE_ENABLED
        value: "true"
      - key: ML_FALLBACK_ENABLED
        value: "true"

  # Frontend Static Site
  - type: static
    name: lait-web
    buildCommand: |
      echo "ðŸ”§ Building frontend..."
      cd frontend
      npm ci --silent
      npm run build
      echo "âœ… Frontend build complete - ready for deployment"
    staticPublishPath: ./frontend/dist
    pullRequestPreviewsEnabled: true
    buildFilter:
      paths:
      - frontend/**
    headers:
      - path: /*
        name: X-Frame-Options
        value: SAMEORIGIN
      - path: /*
        name: X-XSS-Protection  
        value: 1; mode=block
      - path: /*
        name: X-Content-Type-Options
        value: nosniff
      - path: /static/*
        name: Cache-Control
        value: public, max-age=31536000, immutable
    routes:
      - type: rewrite
        source: /*
        destination: /index.html
    envVars:
      - key: VITE_API_BASE
        value: https://lait-api.onrender.com
      - key: NODE_ENV
        value: production

databases:
  # PostgreSQL Primary Database
  - name: lait-postgres
    databaseName: lait_production
    user: lait_user
    region: oregon
    plan: starter
    postgresMajorVersion: 15

  # Redis Cache & Session Store
  - name: lait-redis
    region: oregon
    plan: starter
    maxmemoryPolicy: allkeys-lru
